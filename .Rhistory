setmean <- function(mean)
m <<- mean
getmean <- function()
m
list(set = set, get = get, setmean = setmean, getmean = getmean)
}
c = rbind(c(1, -1/4), c(-1/4, 1))
class(c)
solve(c)
d = rbind(c(1,2,3),c(4,5,6),c(7,8,9))
CLaa(d)
class(d)
d
solve(d)
c = rbind(c(1, -1/4), c(-1/4, 1))
class(c)
solve(c)
solve(c)%*%c
?<<
initMatrix <- function(rows, cols, fn) {
A <- matrix(nrow=rows, ncol=cols)
for (i in 1:rows)
for (j in 1:cols)
A[i,j] <- fn(i,j)
return(A)
}
initMatrix(3,3)
initMatrix(3,3,3)
set <- function(y) {
x <<- y
m <<- NULL
}
set(4)
ls
set <- function(y) {
x <<- y +7
m <<- NULL
}
set(4)
library(MASS)
matX<-matrix(c(rep(1, 8),2,3,4,0,6,4,3,7,-2,-4,3,5,7,8,9,11), nrow=8, ncol=3)
matX
inv <- ginv(matX)
inv
inv1 <- ginv(inv)
inv1
x <- matrix(1:8, nrow=2)
makeCacheMatrix <- function(x=matrix()){
inv << ginv(x)
}
x <- matrix(1:8, nrow=2)
makeCacheMatrix <- function(x){
inv << ginv(x)
}
x <- matrix(1:8, nrow=2)
inv << ginv(x)
inv <- ginv(x)
get <- function() x
get
get <- function() 1
get
get()
makeCacheMatrix <- function(x){
inv <- ginv(x)
y << inv
get <- function() y
}
x <- matrix(1:8, nrow=2)
makeCacheMatrix <- function(x){
inv <- ginv(x)
y << inv
get <- function() y
}
library(MASS) # for inversing Matrix
x <- matrix(1:8, nrow=2)
inv <- ginv(x)
inv
x <- matrix(1:8, nrow=2)
makeCacheMatrix <- function(x){
library(MASS) # for inversing Matrix
inv <- ginv(x)
y << inv
get <- function() y
}
x <- matrix(1:8, nrow=2)
makeCacheMatrix <- function(x){
library(MASS) # for inversing Matrix
y <- ginv(x)
#y << inv
get <- function() y
}
get()
x <- matrix(1:8, nrow=2)
makeCacheMatrix <- function(x){
y <- ginv(x)
#y << inv
get <- function() y
}
get(0)
get()
inv <- ginv(x)
inv
x <- matrix(1:8, nrow=2)
x
x <- matrix(1:8, nrow=2)
makeCacheMatrix <- function(x){
inv <- ginv(x)
y <<- inv
get <- function() y
}
get()
x <- matrix(1:8, nrow=2)
makeCacheMatrix <- function(x){
y <- ginv(x)
# y <<- inv
get <- function() y
}
get()
x <- matrix(1:8, nrow=2)
makeCacheMatrix <- function(x){
y <- ginv(x)
# y <<- inv
get <- function() y
}
cachemean <- function() {
m <- get()
inv <- ginv(m)
x
}
x
x <- matrix(1:8, nrow=2)
makeCacheMatrix <- function(x){
y <- ginv(x)
# y <<- inv
get <- function() y
}
cachemean <- function() {
m <- get()
x <- ginv(m)
x
}
x
x <- matrix(1:8, nrow=2)
makeCacheMatrix <- function(x){
y <- ginv(x)
get <- function() y
}
cachemean <- function() {
inv <- get()
x <- ginv(inv)
x
}
x
install.packages("MASS")
system.time(readLines("http://www.jhsph.edu"))
hilbert <- function(n){
i <- 1:n
1/outer(i-1,i,"+")
}
hilbert(8)
system.time(svd(x))
hilbert(1000)
system.time(svd(x))
?outer()
sample.interval=10000
## lm(y~x)
sample.interval=10000
summaryRprof()
$by.total
set.seed(20)
x <- rnorm(100)
e <- rnorm(100,0,2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x.y)
plot(x,y)
# what if x is binary
set.seed(10)
x <- rnorm(100,1,0.5)
e <- rnorm(100,0,2)
y <- 0.5 + 2 * x + e
summary(y)
plot(y)
plot(y,x)
plot(y,x)
plot(x,y)
set.seed(1)
x <- rnorm(100)
log.mu <- 0.5 + 0.3 * x
y <- rpois(100,exp(log.mu))
summary(y)
plot(x,y)
set.seed(1)
rpois(5, 2)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
?pch
x <- c(-0.5,0,1,1,1.5)
y <- c(0,0,2,0,0)
plot(x,y,lwd=3,frame=F,type="1")
y <- c(0,0,2,2,0,0)
plot(x,y,lwd=3,frame=F,type="1")
pdeta(0.75,1,0)
install.packages("pbeta")
1.5*.75
0.75*2
1.5*(.72/2)
pbeta(0.75,1,0)
pbeta(0.75,2,1)
pbeta(0.75,1,1)
?pbeta
1*0.75/1
x <- c(-0.5,0,1,1,1.5)
y <- c(0,0,2,2,0)
plot(x,y,lwd=3,frame=F,type="1")
x <- c(-0.5,0,1,1,1.5)
y <- c(0,0,2,2,0)
plot(x,y,lwd=3,frame=F,type="l")
?pbeta
40|
\
\ 1f\\\\\\\\ \
1111
\\\\\\\\\\\\\\\\\\\\
01  c00000011
\v4444444444444444444444063 c56x0709\\0\
00000000000000000000000\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
pbeta(.75,1,1)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
temp
# This program compute a matrix inverse
temp
mean(x)
pbeta(0.75,1,1)
mean(p)
mean(x)
(1*0.1)+(2*0.2)+(3*0.3)+(4*0.4)
install.packages("knitr")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?print.trellis()
?trellis.par.set()
library(datasets)
data(airquality)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
ggplot(movies, aes(votes, rating))
install.packages("ggplot2")
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
ggplot(movies, aes(votes, rating)
)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?ggplo2(0)
?ggplo2()
?ggplot()
library(datasets)
data(cars)
with(cars, plot(speed, dist))
library(datasets)
hist(airquality$Ozone) ## Draw a new plot -- single dimension
with(airquality, plot(Wind, Ozone))
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone(ppb")
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and wind in New Yor City") ## add a title
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month != 5), points(Wind, Ozone, col = "red"))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City", pch = 20))
model <- lm(Ozone ~ Wind, airquality)
abline(model, lwd = 2)
par(mfrow = c(1,3), mar = c(4,4,2,1), oma = (0,0,2,0))
with(airquality,{
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
plot(Temp, Ozone, main = "Ozone and Solar Radiation")
mtext("Ozone and Solar Radiation", outer = TRUE)
})
example(points)
x <- 12
if(x > 13) stop("test error")
x
x <- 12
if(x > 13)
stop("test error")
x
x <- 12
if(x > 13) {
stop ("test error")
}
ppois(3,lambda=2.5*4)
ppois(10,lambda=5*3)
pbinom(3, size =5, prob=.5, lower.tail = F)
1100 + (2*75)
1100 + (1.645*75)
qnorm(.95, mean =1100, sd = 75)
sqar(1/12)
sqr(1/12)
sqre(1/12)
?squ
15 +(10*1.645)
qnorm(.95, mean =.5, sd = 0.288)
qnorm(.95, mean=30, sd=1)
qnorm(.95, mean=12, sd=4)
qnorm(.95, mean=1100, sd=30)
ppois(11,5,lower.tall=F)
qnorm(.95, mean=12, sd=4)
18.57941/2
? data.frame
z <- data.frame(
subject=c(1:5),
Baseline=c(140,138,150,148,135),
Week2=c(132,135,151,146,130)
)
z
mean(Balseline)
mean(z$Balseline)
mean(Z$Balseline)
mean(z$Baseline)
mean(z$Week2)
sd(z$Week2)
sd(z$Baseline)
?p-vale
qnorm(.95, mean=mean(z$Week2), sd=sd(z$Week2))
?pt
qnorm(.95, mean=138.8, sd=9.20)
z <- data.frame(
subject=c(1:5),
Baseline=c(140,138,150,148,135),
Week2=c(132,135,151,146,130)
)
t.test(z$Baseline-z$Week2     )
pt(3/4,3,lower.tail=F)
pbinom(3,size=4,prob=.5,lower.tall=T)
pbinom(3,size=4,prob=.5,lower.tall=TRUE)
pbinom(3,size = 4, prob = .5, lower.tall = TRUE)
pbinom(3,size = 4, prob = .5, lower.tall = F)
pbinom(3,size = 4, prob = .5)
ppois(10,1,lower.tail=F)
ppois(10,.18,lower.tail=F)
pnorm(1.642,lower.tail=F)
qnorm(.95, mean=12, sd=4)
install.packages("Using")
install.packages("UsingR")
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
Final Earthquake Analysis
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit <- lm(y~x)
summ(fit)
summary(fit)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit <- lm(y~x)
summary(fit)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean(x)
data(mtcars)
str(mtcars)
fit <- lm(mtcars$mpg ~ mtcars$wt)
summary(fit)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
sd(x)
mean(x)
(8.58-9.31)/0.75
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(I(x-mean(x)) ~ I(y-mean(y)) - 1)
stewday <- activity.impute[,c("steps","wdays")]
setwd("C:\\Users\\IDMS-TB\\RepData_PeerAssessment1")
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
activity <- read.csv("activity.csv", sep=",", head = T, colClasses = c("numeric", "Date", "numeric"))
str(activity)
hist(with(activity, tapply(steps, date, sum, na.rm =T)), col="green", main="Total number of steps taken each day",
xlab = "Steps")
# Mean and median of total number of steps taken each day
stepsmean <- mean(with(activity, tapply(steps, date, sum, na.rm =T)))
stepsmedian <- median(with(activity, tapply(steps, date, sum, na.rm =T)))
# mean
stepsmean
# median
stepsmedian
library(reshape2)
intervaldata <- activity[,c("steps","interval")]
intervaldata <- melt(intervaldata, id=("interval"))
intervaldata <- dcast(intervaldata, formula =interval ~ variable, mean,na.rm=TRUE)
plot(intervaldata$interval, intervaldata$steps, col="black", type="l", xlab = "5-minutes interval", ylab = "Average     number of steps taken")
totalNA <- sum(is.na(activity))
sum(is.na(activity$steps))
sum(is.na(activity$date))
sum(is.na(activity$interval))
# calculate mean steps taken that will be used to impute missing steps values
mstep <- with(activity,tapply(steps,interval,mean,na.rm=T))
# convert mean step by interval data into data frame so that we could merge it with the original data for the     imputation purpose
dmstep <- data.frame(interval=names(mstep), meansteps = mstep)
# merge the original data and average step data
activity.impute <- merge(activity, dmstep, by = "interval")
# replace missing steps value with average steps calcualted in the above steps and
for(i in 1:nrow(activity.impute)) {
activity.impute$steps[i] <- replace(activity.impute$steps[i], (is.na(activity.impute$steps[i]) == TRUE), activity.impute$meansteps[i])
}
View(activity.impute)
View(activity.impute)
totalNA <- sum(is.na(activity.impute))
sum(is.na(activity.impute$steps))
sum(is.na(activity.impute$date))
sum(is.na(activity.impute$interval))
hist(with(activity.impute, tapply(steps, date, sum, na.rm =T)), col="green", main="Total number of steps taken each day",
xlab = "Steps")
# Mean and median of total number of steps taken each day
stepsmeanimp <- mean(with(activity.impute, tapply(steps, date, sum, na.rm =T)))
stepsmedianimp <- median(with(activity.impute, tapply(steps, date, sum, na.rm =T)))
# mean
stepsmeanimp
# median
stepsmedianimp
activity.impute$wdays <- weekdays(activity.impute$date)
activity.impute$wdays <- factor(activity.impute$wdays,
levels = c("Monday", "Tuesday", "Wednesday" ,"Thursday" ,"Friday","Saturday", "Sunday"),
labels = c("weekday","weekday","weekday","weekday","weekday","weekend","weekend"))
View(activity.impute)
View(activity.impute)
# merge the original data and average step data
activity.impute <- merge(activity, dmstep, by = "interval")
# replace missing steps value with average steps calcualted in the above steps and
for(i in 1:nrow(activity.impute)) {
activity.impute$steps[i] <- replace(activity.impute$steps[i], (is.na(activity.impute$steps[i]) == TRUE), activity.impute$meansteps[i])
View(activity.impute)
View(activity.impute)
activity.impute$meansteps[i])
# merge the original data and average step data
activity.impute <- merge(activity, dmstep, by = "interval")
# replace missing steps value with average steps calcualted in the above steps and
for(i in 1:nrow(activity.impute)) {
activity.impute$steps[i] <- replace(activity.impute$steps[i], (is.na(activity.impute$steps[i]) == TRUE), activity.impute$meansteps[i])
)
View(activity.impute)
View(activity.impute)
activity.impute$wdays <- weekdays(activity.impute$date)
View(activity.impute)
View(activity.impute)
activity.impute$wdays <- replace(activity.impute$wdays, any(activity.impute$wdays == "Monday"), "weekday")
View(activity.impute)
View(activity.impute)
table((activity.impute$wdays)
)
activity.impute$wdays <- weekdays(activity.impute$date)
activity.impute$wdays <- replace(activity.impute$wdays, (activity.impute$wdays == "Monday"), "weekday")
table(activity.impute$wdays)
activity.impute$wdays <- replace(activity.impute$wdays, (activity.impute$wdays == "Tuesday"), "weekday")
activity.impute$wdays <- replace(activity.impute$wdays, (activity.impute$wdays == "Wednesday"), "weekday")
activity.impute$wdays <- replace(activity.impute$wdays, (activity.impute$wdays == "Thursday"), "weekday")
activity.impute$wdays <- replace(activity.impute$wdays, (activity.impute$wdays == "Friday"), "weekday")
activity.impute$wdays <- replace(activity.impute$wdays, (activity.impute$wdays == "Saturday"), "weekend")
activity.impute$wdays <- replace(activity.impute$wdays, (activity.impute$wdays == "Sunday"), "weekend")
table(activity.impute$wdays)
stepwday <- activity.impute[,c("steps","wdays")]
stepwday <- melt(stepwday, id=("wdays"))
stepwday <- dcast(stepwday, formula =wdays ~ variable, mean,na.rm=TRUE)
View(stepwday)
View(stepwday)
activity.impute$wdays <- weekdays(activity.impute$date)
activity.impute$wdays <- replace(activity.impute$wdays, (activity.impute$wdays == "Monday"), "weekday")
activity.impute$wdays <- replace(activity.impute$wdays, (activity.impute$wdays == "Tuesday"), "weekday")
activity.impute$wdays <- replace(activity.impute$wdays, (activity.impute$wdays == "Wednesday"), "weekday")
activity.impute$wdays <- replace(activity.impute$wdays, (activity.impute$wdays == "Thursday"), "weekday")
activity.impute$wdays <- replace(activity.impute$wdays, (activity.impute$wdays == "Friday"), "weekday")
activity.impute$wdays <- replace(activity.impute$wdays, (activity.impute$wdays == "Saturday"), "weekend")
activity.impute$wdays <- replace(activity.impute$wdays, (activity.impute$wdays == "Sunday"), "weekend")
stepwday <- activity.impute[,c("steps","wdays","interval")]
stepwday <- melt(stepwday, id=("wdays","interval" ))
stepwday <- dcast(stepwday, formula =interval + wdays ~ variable, mean,na.rm=TRUE)
View(activity.impute)
View(activity.impute)
stepwday <- activity.impute[,c("steps","wdays","interval")]
stepwday <- melt(stepwday, id=c("wdays","interval"))
stepwday <- dcast(stepwday, formula =interval + wdays ~ variable, mean,na.rm=TRUE)
View(stepwday)
View(stepwday)
par(mfrow = c(1,2), mar = c(5,4,2,1))
with(subset(stepwday, wdays == "weekday"), plot(interval, steps, main = "Weekday"))
with(subset(stepwday, wdays == "weekend"), plot(interval, steps, main = "Weekend"))
par(mfrow = c(2,1), mar = c(5,4,2,1))
with(subset(stepwday, wdays == "weekday"), plot(interval, steps, main = "Weekday"))
with(subset(stepwday, wdays == "weekend"), plot(interval, steps, main = "Weekend"))
par(mfrow = c(2,1), mar = c(5,4,2,1))
with(subset(stepwday, wdays == "weekday"), plot(interval, steps, type = "I", main = "Weekday"))
with(subset(stepwday, wdays == "weekend"), plot(interval, steps, type = "I", main = "Weekend"))
par(mfrow = c(2,1), mar = c(5,4,2,1))
with(subset(stepwday, wdays == "weekday"), plot(interval, steps, type = "l", main = "Weekday"))
with(subset(stepwday, wdays == "weekend"), plot(interval, steps, type = "l", main = "Weekend"))
?plot
par(mfrow = c(2,1), mar = c(5,4,2,1))
with(subset(stepwday, wdays == "weekday"), plot(interval, steps, type = "l", col = "blue",
xlab = "Interval", ylab  = "Number of steps", main = "Weekday"))
with(subset(stepwday, wdays == "weekend"), plot(interval, steps, type = "l", col = "blue",
xlab = "Interval", ylab  = "Number of steps", main = "Weekend"))
